var DOM;
/**
 *  lib/DOM.js
 *  This file is part of the DOM MOBILE package.
 *  
 * (c) Gaetan Vigneron <gaetan@webworkshops.fr>
 *  V 0.3.0
 *  
 *  10/10/2016 
 **/
(function () {
    'use strict';
    DOM = function () {
        var param = {
            fps: 24,
        }
        var events = {
            mouseup: [],
            click: [],
            mousemove: [],
            mousewheel: [],
            refresh: [],
            resize: [],
        }
        var parseEvent = function (e) {
            
            if (e.targetTouches) {
                if (e.targetTouches.length === 1) {
                    var touch = e.targetTouches[0];
                    e.touch = {x: touch.pageX, y: touch.pageY};
                }
            } else {
                e.touch = {x: e.clientX, y: e.clientY};
            }
        };
        var EVENT = {
             /**
             * @Correct (Bug display css transform)
             **/
            refresh: function () {
                for (var i in events.refresh) {
                    events.refresh[i]();
                }
            },
            click: function (e) {
                parseEvent(e);
                for (var i in events.click) {
                    events.click[i](e);
                }
                return false;
            },
            resize: function (e) {
                parseEvent(e);
                for (var i in events.resize) {
                    events.resize[i](e);
                }
                return false;
            },
            mousemove: function (e) {
                
                parseEvent(e);
                for (var i in events.mousemove) {
                    events.mousemove[i](e);
                }
            },
            mousewheel: function (e) {
                parseEvent(e);
                for (var i in events.mousewheel) {
                    events.mousewheel[i](e);
                }
            },
            mouseup: function (e) {
                parseEvent(e);
                for (var i in events.mouseup) {
                    events.mouseup[i](e);
                }
            }
        };
        
        setInterval(EVENT.refresh, param.fps);
        window.addEventListener("resize", EVENT.resize);
        document.addEventListener((/Firefox/i.test(navigator.userAgent)) ? "DOMMouseScroll" : "mousewheel", EVENT.mousewheel);
        if ('ontouchstart' in window || navigator.maxTouchPoints) {
            document.addEventListener("touchstart", EVENT.click);
            document.addEventListener("touchmove", EVENT.mousemove);
            document.addEventListener("touchend", EVENT.mouseup);
            document.addEventListener("touchleave", EVENT.mouseup);
        } else {
            document.addEventListener("mousedown", EVENT.click);
            document.addEventListener("mousemove", EVENT.mousemove);
            document.addEventListener("mouseup", EVENT.mouseup);
            document.addEventListener('mouseout', function (e) {
                if (e.toElement == null && e.relatedTarget == null) {
                    EVENT.mouseup(e);
                }
            });
        }
        return({
            extendDOM :  function (fngroup) {
                if(typeof jQuery !== 'undefined') {
                    jQuery.fn.extend(fngroup);
                }
                for (var i in fngroup) {
                        HTMLElement.prototype[i] = fngroup[i];
                }

            },
            extendEVENT: function (fngroup) {
                for (var i in fngroup) {
                    switch (i) {
                        default:
                            throw(i + " is not a known extendEVENT");
                            break;
                        case "click":
                            events.click.push(fngroup[i]);
                            break;
                        case "mouseup":
                            events.mouseup.push(fngroup[i]);
                            break;
                        case "mousemove":
                            events.mousemove.push(fngroup[i]);
                            break;
                        case "mousewheel":
                            events.mousewheel.push(fngroup[i]);
                            break;
                        case "refresh":
                            events.refresh.push(fngroup[i]);
                            break;
                        case "resize":
                            events.resize.push(fngroup[i]);
                            break;
                    }
                }
            },
            selection: function (boolean) {
                if (!boolean) {
                    var a = document.querySelector("*");
                    a.style.MozUserSelect = "none";
                    a.style.webkitUserSelect = "none";
                    a.style.oUserSelect = "none";
                    a.style.khtmlUserSelect = "none";
                    a.style.msUserSelect = "none";
                    a.style.userSelect = "none";

                } else {
                    var a = document.querySelector("*");
                    a.style.MozUserSelect = "text";
                    a.style.webkitUserSelect = "text";
                    a.style.oUserSelect = "text";
                    a.style.khtmlUserSelect = "text";
                    a.style.msUserSelect = "text";
                    a.style.userSelect = "text";
                }
                
                
                
            },
        });
  
    }();
    DOM.selection(false);
})();










/**
 *  lib/ELEMENT.js
 *  This file is part of the DOM MOBILE package.
 *  
 * (c) Gaetan Vigneron <gaetan@webworkshops.fr>
 *  V 0.1.0
 *  
 *  10/10/2016 
 ***
 **/
(function () {
    'use strict';
    DOM.extendDOM(
            {
                toNatif: function () {
                    if (typeof jQuery !== 'undefined' && this instanceof jQuery) {
                        return this[0];
                    }
                    return this;
                },
                getTransform: function () {
                    var node = this.toNatif();
                    var computedStyle = window.getComputedStyle(node);
                    var transformX = 0;
                    var transformY = 0;
                    var t = computedStyle.transform;
                    if (t != "none") {
                        var re = /\((.*)\)/
                        var pos = re.exec(computedStyle.transform);
                        var matrix = pos[1].split(",");
                        transformX = parseInt(matrix[4]);
                        transformY = parseInt(matrix[5]);
                    }
                    return  {x: transformX, y: transformY};

                },
                inPage: function () {
                    var node = this.toNatif();
                    return (node === document.body) ? false : document.body.contains(node);

                },
                getOffset: function () {
                    var node = this.toNatif();
                    var e = jQueryToNatif(node);
                    var bc = e.getBoundingClientRect();
                    var computedStyle = window.getComputedStyle(node);
                    var paddingTop = parseInt(computedStyle.paddingTop, 10);
                    var paddingBottom = parseInt(computedStyle.paddingBottom, 10);
                    var paddingLeft = parseInt(computedStyle.paddingLeft, 10);
                    var paddingRight = parseInt(computedStyle.paddingRight, 10);
                    var h = e.clientHeight;
                    var marginTop = parseInt(computedStyle.marginTop, 10);
                    var borderTop = parseInt(computedStyle.borderTopWidth, 10)
                    h += marginTop + borderTop;
                    h += parseInt(computedStyle.borderBottomWidth, 10);
                    h += parseInt(computedStyle.marginBottom, 10);
                    var w = e.clientWidth;
                    w += parseInt(computedStyle.marginRight, 10);
                    w += parseInt(computedStyle.borderRightWidth, 10);
                    var marginLeft = parseInt(computedStyle.marginLeft, 10);
                    ;
                    var borderLeft = parseInt(computedStyle.borderLeftWidth, 10);
                    w += borderLeft + marginLeft;

                    /********************
                     * TO DO 
                     * ANGLE TRANSFORM
                     * SCALE TRANSFORM
                     */

                    return {
                        left: bc.left + window.scrollX - marginLeft,
                        top: bc.top + window.scrollY - marginTop,
                        outer: {height: h, width: w},
                        inner: {height: e.clientHeight - (paddingTop + paddingBottom), width: e.clientWidth - (paddingRight + paddingLeft)}
                    }
                }
            }
    );


    HTMLElement.prototype.removeClass = function (n) {
        if (typeof n === "string") {
            n = n.trim();
            var $i, $a, $b;
            $b = n.split(" ");
            $a = this.className.split(" ");
            for (var i = 0; i < $b.length; i++) {
                var nE = $b[i];
                $i = ($a).indexOf(nE);
                if (($i) !== -1)
                    $a.splice($i, 1);
            }
            this.className = $a.join(" ");
            return true;
        } else
            return false;
    };

    HTMLElement.prototype.addClass = function (n) {
        if (typeof n === "string") {
            n = n.trim();
            var $a, $b;
            if (this.className) {
                $a = this.className.split(" ");
            } else
                $a = [];
            $b = n.split(" ");
            for (var i = 0; i < $b.length; i++) {
                var nE = $b[i];
                if (($a).indexOf(nE) === -1) {
                    $a.push(nE);

                }
            }
            this.className = $a.join(" ");
            return true;
        } else
            return false;
    };
})();




/**
 *  lib/MOVE.js
 *  This file is part of the DOM MOBILE package.
 *  
 * (c) Gaetan Vigneron <gaetan@webworkshops.fr>
 *  V 0.2.0
 *  
 *  10/10/2016 
 ***
 *
 *  #move
 *  @target dom | jQueryDom
 *  @syntax  dom.move {function}  
 *  @param way{string} 
 *         x
 *         y
 *         xy
 *  @param speed{integer}        
 *  @param callback{function} 
 *  @exemple : dom.move("xy", 1, callback);
 *  
 **/

(function () {
    'use strict';
    var PATH = function (dom,way,speed,callback) {

        var matrix = [1, 0, 0, 1, 0, 0],
            time= performance.now(),
            computedStyle = window.getComputedStyle(dom)
        ;
        var t = computedStyle.transform;
        if (t != "none") { 
            var pos = /\((.*)\)/.exec(t);
            matrix = pos[1].split(",");
        };
        this.matrix=matrix;
        this.timeStart =time;
        this.timeEnd = time;
        this.speed = speed;
        this.dom=dom;
        this.css = {
            transitionDuration: computedStyle.transitionDuration,
            transitionProperty: computedStyle.transitionProperty,
            transitionDelay: computedStyle.transitionDelay,
        }
        dom.style.transition="none";
        var transform = dom.getTransform();
        var x=parseInt(dom.style.left);
        var y=parseInt(dom.style.top);
        if(transform.y!==0|| transform.x!==0){
            dom.offsetHeight; // REFRESH STYLE
            if(transform.y!==0){ dom.style.top = y + transform.y + "px";}
            if(transform.x!==0){dom.style.left = x + transform.x + "px";}   
        }
        this.css.left=computedStyle.left;
        this.css.top=computedStyle.top;
        this.transform={
            start:{x: 0, y: 0},
            end:{x: 0, y:0},    
        }
        this.pos={
            start:{x: x, y: y},
            end:{x: x, y: y},
        }
        this.way=way  ; 
        this.callback=callback;
        this.refresh=false ;   
    }
    
    var MOVE = function () {
        var event = false;
        DOM.extendDOM(
                {
                    move: function ( way, speed, callback) {
                        var e = this.toNatif();
                        event = new PATH(e,way,speed,callback);
                    }
                }
        );
        DOM.extendEVENT({
            refresh:function(){
                  if(event){
                    var d = event;
                    if (d.refresh) {
                        var pos = d.refresh.touch;
                        var x = 0;//d.transPosStart.x;
                        var y = 0;//d.transPosStart.y;
                        switch (d.way) {
                            case "-x":
                                x += (d.mouse.x - pos.x) * d.speed;
                                break;
                            case "x":
                                x -= (d.mouse.x - pos.x) * d.speed;
                                break;
                            case "-y":
                                y += (d.mouse.y - pos.y) * d.speed;
                                break;
                            case "y":
                                y -= (d.mouse.y - pos.y) * d.speed;
                                break;
                            case "xy":
                                x -= (d.mouse.x - pos.x) * d.speed;
                                y -= (d.mouse.y - pos.y) * d.speed;
                                break;
                        }

                        d.transform.end = {y: y, x: x};
                        d.dom.style.transform = "matrix(" + d.matrix[0] + "," + d.matrix[1] + "," + d.matrix[2] + "," + d.matrix[3] + ", " +x+ ", " + y + ")";
                        d.refresh = false;
                    }
                }
            },
            mousemove: function (e) {
                if(event){
                   if (!event.mouse) {
                       event.mouse = e.touch;
                   }
                   event.refresh = e;
                }
           
                
            },
            mouseup: function (e) {
                if(event){
                    EVENTMOVE.stopDragAndDrop();
                }
                
            }

        });

        var EVENTMOVE = {
            stopDragAndDrop : function () {
                event.pos.end = {x: parseInt(event.css.left) + event.transform.end.x, y: parseInt(event.css.top) + event.transform.end.y};  
                event.timeEnd = performance.now()
                var computedStyle = window.getComputedStyle(event.dom);
                event.dom.style.transform = "matrix(" + event.matrix[0] + "," + event.matrix[1] + "," + event.matrix[2] + "," + event.matrix[3] + ",0,0)";
                if (computedStyle.position == "absolute" || computedStyle.position == "fixed" || computedStyle.position == "relative") {
                    event.dom.style.top = parseInt(event.css.top) + event.transform.end.y + "px";
                    event.dom.style.left = parseInt(event.css.left) + event.transform.end.x + "px";
                }
                var time = event.timeEnd - event.timeStart;
                var x = Math.abs(event.transform.end.x);
                var y = Math.abs(event.transform.end.y);
                event.vitesse = {x: 1 / (time * 1 / x), y: 1 / (time * 1 / y)};
                event.dom.offsetHeight; // REFRESH STYLE
                event.dom.style.transitionDuration = event.css.transitionDuration;
                event.dom.style.transitionProperty = event.css.transitionProperty;
                event.dom.style.transitionDelay = event.css.transitionDelay;
                event.callback(event);
                event=false;
                
            }
        };
    }();

})();

       
/**
 *  lib/TOUCHEVENT.js
 *  This file is part of the DOM MOBILE package.
 *  
 * (c) Gaetan Vigneron <gaetan@webworkshops.fr>
 *  V 0.2.0
 *  
 *  10/10/2016 
 ***
 *
 *  #touchevent
 *  @target dom | jQueryDom
 *  @syntax  dom.touchevent {function}  
 *  @param eventname{string} 
 *       - Same for MOUSE & TOUCH 
 *         click
 *         longclick
 *         longclickup
 *         touchX
 *         touchY
 *         dbclick
 *         scrollUp
 *         scrollDown
 *         resizeX
 *         resizeY
 *  @param callback{function} 
 *  @exemple : dom.touchevent('dbclick', dbclick);
 *
 **/
(function () {
    'use strict';
    var timeout = false;
    var EVENT = function (e) {
        this.target = e.target;
        this.timeStart = performance.now()
        this.mouseStart = {x: e.touch.x, y: e.touch.y};
        this.vitesse = {x: 0, y: 0};
        this.origin = e.target;
        this.mouseEnd = {x: e.touch.x, y: e.touch.y},
        this.etat = "init";
        if (timeout) {
            clearTimeout(timeout);
        }
    }

    var TOUCHEVENT = function () {
        var refDom = "data-touchevent";
        var param = {
            timeLongclick: 400, //@Time to determinate when is a longClick
            timeDbclick: 200, //@Time to determinate when is a dbclick
            debug: false,
        }
        var event = false;
        var memwindow = {x: window.innerWidth, y: window.innerHeight};
        var trace = function (value) {
            if (param.debug) {
                console.log(value);
            }
        };

        var findParent = function (n, param) {
            while (n != null) {
                if (n[refDom] && typeof n[refDom][param] === 'function') {
                    return n
                }
                var n = n.parentNode;
            }
            return false;
        };
        /**
         -------------------------
         @INIT                   : (touchdown)=> click.etat="init" 
         -------------------------
         @SCROLLUP               : (scrollup)=> click.etat="scrollUp"
         @SCROLLDOWN             : (scrolldown)=> click.etat="scrollDown"
         -------------------------
         ETAT::init
         @INIT                   :  move="whereYouGo"
         @WAITCLICK              : (touchup)                => click.etat="waitclick"
         @LONGCLICK              : (time>timeLongclick)     => click.etat="longclick"
         @MOVEX                  : (touchmove && moveX >4)  => click.etat="moveX"
         @MOVEY                  : (touchmove && moveY >4)  => click.etat="moveY"
         -------------------------
         ETAT::waitclick  
         @INIT                   :  move="waitclick"
         @DBCLICK                : (time>timeDbclick)       => click.etat="dbclick"
         @CLICK                : (not event dbclick)        => click.etat="click" 
         -------------------------
         ETAT::longclick
         @INIT                   :  move="longclick"
         @LONGCLICKUP            : (touchup)                => click.etat="longclickup"
         -------------------------
         **/
        DOM.extendDOM(
                {
                    touchevent: function (eventname, callback) {
                        var e = this.toNatif();
                        var affectEvent = function (event, callback) {
                            if (typeof callback !== 'function')
                                throw("callback need to be a function");

                            if (!e.inPage())
                                throw("We can't register a event on a dom not in body");
                            if (!e[refDom])
                                e[refDom] = {};
                            if (e[refDom][event])
                                throw("Event " + event + " is already defined");
                            e[refDom][event] = callback;
                        }
                        switch (eventname) {
                            default:
                                throw(eventname + "is not a known event try touchX or touchY");
                                break;
                            case "click":
                                affectEvent("click", callback);
                                break;
                            case "longclick":
                                affectEvent("longclick", callback);
                                break;
                            case "longclickup":
                                affectEvent("longclickup", callback);
                                break;
                            case "touchX":
                                affectEvent("touchX", callback);
                                break;
                            case "touchY":
                                affectEvent("touchY", callback);
                                break;
                            case "dbclick":
                                affectEvent("dbclick", callback);
                                break;
                            case "scrollUp":
                                affectEvent("scrollUp", callback);
                                break;
                            case "scrollDown":
                                affectEvent("scrollDown", callback);
                                break;
                            case "resizeX":
                                affectEvent("resizeX", callback);
                                e.addClass("resizeX");
                                break;
                            case "resizeY":
                                affectEvent("resizeY", callback);
                                e.addClass("resizeY");
                                break;
                        }
                    },
                }
        );
        DOM.extendEVENT({
            resize: function (e) {
                var w = {x: window.innerWidth, y: window.innerHeight};
                if (w.x !== memwindow.x) {
                    memwindow.x = w.x;
                    var cible = document.querySelectorAll(".resizeX");
                    for (var i = 0; i < cible.length; i++) {
                        var node = cible[i];
                        if (node[refDom] && typeof node[refDom].resizeX === 'function') {
                            node[refDom].resizeX(e);
                        }
                    }
                }
                if (w.y !== memwindow.y) {
                    memwindow.y = w.y;
                    var cible = document.querySelectorAll(".resizeY");
                    for (var i = 0; i < cible.length; i++) {
                        var node = cible[i];
                        if (node[refDom] && typeof node[refDom].resizeY === 'function') {
                            node[refDom].resizeY(e);
                        }


                    }
                }
            },
            click: function (e) {
                if (!event) {
                    trace("init");
                    event = new EVENT(e);
                    if (event.timeout) {
                        clearTimeout(event.timeout);
                    }

                    timeout = setTimeout(function () {
                        EVENTTOUCH.startLongClick();
                    }, param.timeLongclick);
                } else {
                    if (event.etat === "waitclick") {
                        EVENTTOUCH.stopDbClick();
                    }
                }
            },
            mousemove: function (e) {

                if (event) {
                    if (event.etat === "init") {
                        if (Math.abs(e.touch.x - event.mouseStart.x) > 4 || Math.abs(e.clientY - event.mouseStart.y) > 4) {
                            EVENTTOUCH.stopFindYourWay(e);
                        }
                    }
                }

            },
            mouseup: function (e) {
                if (event) {

                    switch (event.etat) {
                        default:
                            trace("event end by mouseup");
                            event = false;
                            break;

                        case "waitlongclick":
                            EVENTTOUCH.stopLongClick();
                            break;
                        case "init":
                            var parent = findParent(event.target, "dbclick");
                            if (parent) {
                                trace("waitclick");
                                event.etat = "waitclick";
                                if (timeout) { clearTimeout(timeout);}
                                timeout = setTimeout(function () {
                                    if (event.etat === "waitclick") {
                                        EVENTTOUCH.stopClick();
                                    }
                                }, param.timeDbclick);
                            } else {
                                EVENTTOUCH.stopClick();
                            }
                            break;

                    }
                }
            },
            mousewheel: function (e) {

                if (!event) {
                    event = new EVENT(e);
                    event.etat = "scroll";
                    e.detail > 0 ? EVENTTOUCH.stopScrollDown() : EVENTTOUCH.stopScrollUp();
                    if (event.etat == "scrollUp" || event.etat == "scrollDown") {

                        e.preventDefault();
                    }
                    event = false;
                }
            }

        });

        var EVENTTOUCH = {
            stopScrollUp: function () {
                if (event && event.etat === "scroll") {
                    var parent = findParent(event.target, "scrollUp");
                    if (parent) {
                        event.target = parent;
                        event.etat = "scrollUp";
                        parent[refDom].scrollUp(event);
                    }
                }
            },
            stopScrollDown: function () {
                if (event && event.etat === "scroll") {
                    var parent = findParent(event.target, "scrollDown");
                    if (parent) {
                        event.target = parent;
                        event.etat = "scrollDown";
                        parent[refDom].scrollDown(event);
                    }
                }
            },
            /***
             * @ASYNCH
             **/
            startLongClick: function () {
                if (event) {
                    if (event.etat === "init") {

                        var node = event.target;
                        var parent = findParent(event.target, "longclick");
                        if (parent) {
                            event.etat = "waitlongclick";
                            trace("waitlongclick");
                            node[refDom].longclick(event);
                            event.target=parent;
                        }

                    }
                }
            },
            stopLongClick: function () {
                if (event) {
                    var node = event.target;
                    event.etat = "longclick";
                    trace("longclick");
                    if (node[refDom] && typeof node[refDom].longclickup === 'function') {
                        node[refDom].longclickup(event);
                    }
                    event = false;
                } else {
                    throw("stopLongClick is call without event");
                }
            },
            /**
             * @ASYNCH
             **/
            stopClick: function () {
                if (event) {
                    if (event.etat === "init" || event.etat === "waitclick") {
                        event.etat = "click"
                        trace("click");
                        
                        var node = event.target;
                        var parent = findParent(event.target, "click");
                        if (parent) {
                            node[refDom].click(event);
                        }
                    }
                    event = false;
                }
            },
            /**
             * @ASYNCH
             **/
            stopDbClick: function () {
                if (event) {
                    if (event.etat === "waitclick") {
                        event.etat = "dbclick"
                        trace("dbclick");
                        var node = event.target;
                         var parent = findParent(event.target, "dbclick");
                         if (parent) {
                            node[refDom].dbclick(event);
                        }
                        event = false;
                    }
                }
            },
            stopFindYourWay: function (e) {
                if (event) {
                    if (event.etat === "init") {
                        var direction = Math.abs(e.touch.x - event.mouseStart.x) > Math.abs(e.touch.y - event.mouseStart.y);

                        if (direction) {
                            event.etat = "moveX";
                            trace("moveX");
                            var parent = findParent(e.target, "touchX");
                            if (parent) {
                                parent[refDom].touchX(event);
                            }
                        } else {
                            event.etat = "moveY";
                            trace("moveY");
                            var parent = findParent(e.target, "touchY");
                            if (parent) {
                                parent[refDom].touchY(event);
                            }

                        }
                        event = false;
                    }
                }

            }
        }

    }();
})();
